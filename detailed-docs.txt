Module 1: Access Control 
    -- Staffs 
        -- there should be option to add new staff member
        -- display total no of active staffs, inactive staffs, and blocked staffs in card format
        -- list of total no of staffs in table format
        -- with action column where logged in user can take action such as view, edit, delete, change status 
        -- after changing status of staff, it should reflect in the list and also in the database 
        -- after clicking view it should show all info of that staff member 
        -- after clicking edit it should open a form where user can edit that info and form fields should be prefilled with that staff member's info and after saving it should reflect in the list and also in the database 
        -- after clicking delete it should delete that staff member from the list and also from the database  
        -- there should be option to delete multiple staff members at once from the list and also from the database  
        -- there should be option to change status of multiple staff members at once from the list and also in the database  
    -- database columns: 
        'users' table: 
            id, user_name, fname, lname, phone, password, dob, marital, gender, email, current_address, permanent_address, city, state, country, pincode, profile_image, status, email_verified_at, remember_token


    -- Roles 
        -- there should be option to add new role 
            -- one input field for role name 
            -- one checkbox for each permission that is designed already 
            -- after saving it should reflect in the list and also in the database 
        -- display total no of roles in card format
        -- list of total no of roles in table format
        -- with action column where logged in user can take action such as edit, delete 
        -- after clicking edit it should open similar form as of adding new role and form fields should be prefilled with that role's info and after saving it should reflect in the list and also in the database 
        -- after clicking delete it should delete that role from the list and also from the database  

    -- Permissions 
        -- there should be option to add new permission 
            -- one input field for permission name 
            -- after saving it should reflect in the list and also in the database 
        -- display total no of permissions in card format
        -- list of total no of permissions in table format
        -- with action column where logged in user can take action such as edit, delete 
        -- after clicking edit it should open a form where user can edit that permission's name and after saving it should reflect in the list and also in the database 
        -- after clicking delete it should delete that permission from the list and also from the database  
        -- there should be option to delete multiple permissions at once from the list and also from the database  
        -- there should be option to change status of multiple permissions at once from the list and also in the database  


Module 2: Customer Groups 
    -- there should be option to add new customer group 
        -- one input field for customer group name 
        -- and one file input to upload customer list in excel format 
        -- after submit redirect to customer group list page 
        -- and show success message 
        -- and show error message if any error occurs 
        -- after successful submission show total no of customers added in that group 
        -- and total no of customers already exist in that group 
        -- and total no of customers not added due to some error 
    -- display total no of customer groups in card format
    -- list of total no of customer groups in table format
    -- with action column where logged in user can take action such as view, edit, delete, change status 
    -- after changing status of customer group, it should reflect in the list and also in the database 
    -- after clicking view it should show all info of that customer group 
        -- there should be option to add new customer in that group 
        -- there should be option to add multiple customers in that group at once 
        -- display total no of customers in that group in card format
        -- list of total no of customers in that group in table format
        -- with action column where logged in user can take action such as view, edit, delete, change status 
        -- after clicking view it should show all info of that customer 
        -- after clicking edit it should open a form where user can edit that customer's info and after saving it should reflect in the list and also in the database 
        -- after clicking delete it should delete that customer from the list and also from the database  
        -- there should be option to delete multiple customers at once from the list and also from the database  
        -- there should be option to change status of multiple customers at once from the list and also in the database  
    -- after clicking edit it should open a form where user can edit that customer group's name and after saving it should reflect in the list and also in the database 
    -- after clicking delete it should delete that customer group from the list and also from the database  

    -- database columns: 
        1. 'customers' table: 
            id, facility_name, client_name, contact_name, email, contact_no, company_name, gstin, pan, gst_treatment, private_details, billing_address, billing_country, billing_state, billing_city, billing_zip, shipping_address, shipping_country, shipping_state, shipping_city, shipping_zip, status, 

        2. 'customer_groups' table: 
            id, name, status

        3. 'customer_group_members' table: 
            id, customer_group_id, customer_id



Module 3: Vendors 
    -- there should be option to add new vendor 
        -- create vendor form that already exist in the app 
        -- after submit redirect to vendor list page 
        -- and show success message 
        -- and show error message if any error occurs 
    -- display total no of vendors in card format 
    -- list of total no of vendors in table format 
    -- with action column where logged in user can take action such as view, edit, delete, change status 
    -- after changing status of vendor, it should reflect in the list and also in the database 
    -- after clicking view it should show all info of that vendor 
    -- after clicking edit it should open a form where user can edit that vendor's info and after saving it should reflect in the list and also in the database 
    -- after clicking delete it should delete that vendor from the list and also from the database  
    -- there should be option to delete multiple vendors at once from the list and also from the database  
    -- there should be option to change status of multiple vendors at once from the list and also in the database  

    -- database columns: 
        'Vendors' table: 
            id, vendor_code, client_name, contact_name, phone_number, email, gst_number, gst_treatment, pan_number, billing_address, billing_country, billing_state, billing_city, billing_zip, shipping_address, shipping_country, shipping_state, shipping_city, shipping_zip, status, 


Module 4: Products
    -- there should be option to add new products list using excel format
        -- one select input for warehouse to select in which warehouse products are added. that warehouse list should be fetched from the database warehouses table
        -- one file input to upload products list in excel format 
        -- after submit redirect to products list page 
        -- and show success message 
        -- and show error message if any error occurs 
        -- after successful submission show total no of products added in that warehouse 
        -- and total no of products already exist in that warehouse 
        -- and total no of products not added due to some error 

    -- display total no of products in card format
    -- list of total no of products in table format
    -- with action column where logged in user can take action such as view, edit, delete, change status  
    -- after changing status of product, it should reflect in the list and also in the database 
    -- after clicking view it should show all info of that product 
    -- after clicking edit it should open a popup form where user can edit that product's info and after saving it should reflect in the list and also in the database 
    -- after clicking delete it should delete that product from the list and also from the database  
    -- there should be option to delete multiple products at once from the list and also from the database  
    -- there should be option to change status of multiple products at once from the list and also in the database  
    -- there should be option to download products list in excel format from the list 
    -- and update products list using excel format (same downloaded format can be used to update products list)

    -- database columns: 
        'products' table: 
            id, sku, ean_code, brand, brand_title, mrp, category, pcs_set, sets_ctn, gst,  basic_rate, net_landing_rate, case_pack_quantity, vendor_code, vendor_name, vendor_purchase_rate, vendor_net_landing, status

    -- net_landing_rate = basic_rate + (basic_rate * gst / 100) 
    -- case_pack_quantity = pcs_set * sets_ctn 
    -- vendor_net_landing = vendor_purchase_rate + (vendor_purchase_rate * gst / 100)     -- (optional)




Module 5: SKU Mapping 
    -- there should be option to add new sku mapping using excel format
        -- after clicking add new sku mapping button it should open a popup form 
        -- one file input to upload sku mapping list in excel format 
        -- after submit redirect to sku mapping list page 
        -- and show success message 
        -- and show error message if any error occurs 
        -- after successful submission show total no of sku mappings added 
        -- and total no of sku mappings already exist 
        -- and total no of sku mappings not added due to some error 

    -- display total no of sku mappings in card format
    -- list of total no of sku mappings in table format
    -- with action column where logged in user can take action such as edit, delete
    -- after clicking edit it should open a popup form where user can edit that sku mapping's info and after saving it should reflect in the list and also in the database 
    -- after clicking delete it should delete that sku mapping from the list and also from the database  
    -- there should be option to delete multiple sku mappings at once from the list and also from the database  
    -- there should be option to download sku mappings list in excel format from the list 
    -- and update sku mappings list using excel format (same downloaded format can be used to update sku mappings list)

    -- database columns: 
        'sku_mappings' table: 
            id, product_sku, vendor_sku, customer_sku



Module 6: Warehouse 
    -- there should be option to add new warehouse 
        -- create warehouse form that already exist in the app 
        -- after submit redirect to warehouse list page 
        -- and show success message 
        -- and show error message if any error occurs 
    -- display total no of warehouses in card format
    -- list of total no of warehouses in table format
    -- with action column where logged in user can take action such as view, edit, delete, change status 
    -- after changing status of warehouse, it should reflect in the list and also in the database 
    -- after clicking view it should show all info of that warehouse 
        -- display details of warehouse in card format 
        -- display total no of products in that warehouse in card format 
        -- display total no of blocked products in that warehouse in card format 
        -- display total no of shortage products in that warehouse in card format 
        -- display total no of excess products in that warehouse in card format 
    -- after clicking edit it should open a form where user can edit that warehouse's info and after saving it should reflect in the list and also in the database 
    -- after clicking delete it should delete that warehouse from the list and also from the database  

    -- database columns: 
        'warehouses' table: 
            id, name, type, contact_person_name, phone, alt_phone, email, gst_number, pan_number, address_line_1, address_line_2, licence_doc, max_storage_capacity, country_id, state_id, city_id, pincode, operations, status

        'warehouse_stock' table: 
            id, warehouse_id, product_id, sku, original_quantity, available_quantity, block_quantity



Module 7: Sales Order 

    1. before creating sales order we will check if product quantity is available in warehouse or not 
        -- there will be one button to check availability 
        -- after clicking that button it should show a popup form where user can upload excel file to check availability by choosing warehouse 
        -- after uploading file it should show list of products with their availability in the warehouse 
        -- also checks if customer and product is available in db or not. 
        -- if customer or/and product is not available in db then show reason in reason column such as "customer not found | product not found"
        -- then we will download that file and make changes in blocked quantity and Purchase Order Quantity(for vendor)
        -- if PO quantity changed then make sure to get backup as old po quantity in other column in sales order product table so we can track any time 

        -- then we will go to back, our main sales order page where we can make sales order (by uploading excel file that we downloaded after checking availability and updated)
        -- we can select same customer group and same warehouse and upload excel file to create sales order 
        -- after uploading file it will check if product is available in warehouse or not(same as above), if customer is available or not(same as above), if vendor is available or not (then store in 'not found table' if any of these records which are not found)
        -- not found customers/vendors/products will be stored in not found table 
        -- all other products will be stored in temp order table (which are found)
        -- after creating sales order redirect to sales order list page 

    2. Create purchase order (based on sales order products auto generated)
        -- the products that are stored in temp order table will be used to create purchase order but whose quantity is not available in warehouse will be go to the purchase order  
        -- our vendors are fixed for particular product that is fetched from products table (i.e. stored in products table)
        -- after creating purchase order redirect to purchase order list page 
        -- display total no of purchase orders in card format 
        -- display total no of pending, completed, received orders in card format  
        -- list of total no of purchase orders in table format 
        -- with action column where logged in user can take action such as view, delete, change status 
        -- after changing status of purchase order, it should reflect in the list and also in the database 
        -- after clicking view it should show all info of that purchase order 
        -- display details of purchase order in card format. vendors info, total amount, total paid amount, total due amount, status, etc. 
        -- display list of products in that purchase order in table format 
        -- with action column where logged in user can take action such as edit, delete 
        -- after clicking edit it should open a form where user can edit that purchase order's info and after saving it should reflect in the list and also in the database     
        -- after clicking delete it should delete that purchase order from the list and also from the database  
        -- there should be option to delete multiple purchase orders at once from the list and also from the database  
        -- there should be option to change status of multiple purchase orders at once from the list and also in the database   
        -- there should be option to download purchase order list in excel format from the list 
        -- and update purchase order list using excel format (same downloaded format can be used to update purchase order list) 
        -- there should be option to add vendor pi 
    
    3. Create vendor PI 
        -- there should be option to add new vendor pi for that purchase order 
        -- after clicking add new vendor pi button it should open a popup form 
        -- one file input to upload vendor pi in excel format 
        -- update vendor pi for pi quantity(downloaded vendor pi file that is updated) that is receiving from vendor  
        -- diaplay total no of products in that vendor pi in card format 
        -- display list of products in that vendor pi in table format (update same table as purchase order products table)
        -- after uploading vendor pi - updating purchase order action buttons will be disabled 
        -- after uploading vendor pi - show button to approve or reject vendor pi 


    4. 















        
        
    2. display sales order details after genarating sales order 
        -- display total no of sales orders in card format
        -- display total no of pending, completed, blocked, ready to ship, ready to package orders in card format 
        -- list of total no of sales orders in table format 
        -- with action column where logged in user can take action such as view, delete 
        -- after clicking view it should show all info of that sales order 
            -- display details of sales order in card format 
            -- display total no of products in that sales order in card format 
            -- display total no of blocked products in that sales order in card format 
            -- display total no of available products in that sales order in card format 
            -- display total no of not available products in that sales order in card format 
            -- display list of products in that sales order in table format 
            -- with action column where logged in user can take action such as edit, delete 
            -- after clicking edit it should open a form where user can edit that sales order's info and after saving it should reflect in the list and also in the database 
            -- after clicking delete it should delete that sales order products from the list and also from the database  
            -- there should be option to delete multiple sales orders products at once from the list and also from the database  
        -- there should be option to delete multiple sales orders at once from the list and also from the database  
        

    -- database columns: 
        1. 'sales_orders' table: 
            id, warehouse_id, customer_group_id, status

        2. 'sales_order_products' table: 
            id, sales_order_id, temp_order_id, customer_id, vendor_code, product_id, warehouse_stock_id, sku, ordered_quantity, purchase_ordered_quantity, dispatched_quantity, final_dispatched_quantity, issue_item, issue_reason, issue_description, price, subtotal, status  

        3. 'temp_orders' table: 
            id, customer_name, po_number, sku, facility_name, facility_location, po_date, po_expiry_date, hsn, gst, item_code, description, basic_rate, product_basic_rate, mrp, product_mrp, quantity, available_quantity, block_quantity, purchase_order_quantity, vendor_code, vendor_pi_id, vendor_pi_fulfillment_quantity, vendor_pi_received_quantity, customer_status, vendor_status, product_status

        4. 'not_found_temp_orders' table: 
            id, sales_order_id, customer_name, po_number, sku, facility_name, facility_location, po_date, po_expiry_date, hsn, gst, item_code, description, basic_rate, product_basic_rate, rate_confirmation, net_landing_rate, product_net_landing_rate, net_landing_rate_confirmation, mrp, product_mrp, mrp_confirmation, po_qty, available_quantity, unavailable_quantity, block, case_pack_quantity, purchase_order_quantity, vendor_code, vendor_pi_id, vendor_pi_fulfillment_quantity, customer_status, vendor_status, product_status


        5. 'purchase_orders' table: 
            id, sales_order_id, warehouse_id, customer_group_id, vendor_id, vendor_code, total_amount, total_paid_amount, total_due_amount, status
            

        6. 'purchase_order_products' table: 
            id, temp_order_id, purchase_order_id, sales_order_id, sales_order_product_id, product_id, sku, vendor_code, ordered_quantity


        7. 'vendor_pi' table: 
            id, purchase_order_id, vendor_code, sales_order_id, total_amount, total_paid_amount, total_due_amount, payment_status, status, approve_or_reject_reason


        8. 'vendor_pi_products' table: 
            id, purchase_order_id, vendor_pi_id, vendor_sku_code, title, mrp, quantity_requirement, available_quantity, quantity_received, purchase_rate, gst, hsn, issue_item, issue_reason, issue_description, issue_status

        9. 'purchase_grns' table: 
            id, purchase_order_id, vendor_code, grn_file
        
        
        10. 'purchase_invoices' table: 
            id, purchase_order_id, vendor_code, invoice_file
            

        11. 'payments' table: 
            id, invoice_id, amount, payment_utr_no, payment_method, payment_status

        12. 'appointments' table: 
            id, invoice_id, appointment_date, pod, grn 

        13. 'dns' table: 
            id, invoice_id, dn_amount, dn_reason, dn_receipt

        14. 'invoices' table: 
            id, warehouse_id, invoice_number, customer_id, sales_order_id, invoice_date, round_off, total_amount 
        
        15. 'invoice_details' table:  
            id, invoice_id, product_id, temp_order_id, quantity, unit_price, discount, amount, tax, total_price, description 
        
        16. 'product_issues' table: 
            id, purchase_order_id, vendor_pi_id, vendor_pi_product_id, vendor_sku_code, quantity_requirement, available_quantity, quantity_received, issue_item, issue_reason, issue_description, issue_from, issue_status 

        17. 'vendor_payments' table: 
            id, vendor_pi_id, amount, payment_utr_no, payment_method, payment_status 

        18. 'vendor_return_products' table: 
            id, vendor_pi_product_id, return_quantity, return_reason, return_description, return_status 



Module 8: Purchase Order 
        -- there should be option to add new purchase order (manual entry) 
        -- display total no of purchase orders in card format
        -- display total no of pending, completed, received orders in card format 
        -- list of all purchase orders that are created automatically from sales order 
        -- with action column where logged in user can take action such as view, edit, delete, change status 
        -- after changing status of purchase order, it should reflect in the list and also in the database 







Module: Sales Order 

Note: table columns remain same for all modules 

1.  sales order list 
    a. display list of sales orders in card format such as total no of sales orders, total no of pending sales orders, total no of completed sales orders, total no of blocked sales orders, total no of ready to ship sales orders, total no of ready to package sales orders 
    b. display list of sales orders in table format such as sales order id, customer group name, ordered date, delivery date, status, action 
    c. after clicking view it should show all info of that sales order (http://127.0.0.1:8000/sales-order-view/{id})
    d. after clicking delete it should delete that sales order from the list and also from the database  
    e. there should be option to delete multiple sales orders at once from the list and also from the database  and if show confirm popup before delete such as for if that sales order has unfulfilled quantity then show message that it will delete all related records such as purchase order, vendor pi, etc. 
    f. there should be button to create new sales order (http://127.0.0.1:8000/sales-order-create) 

2. check availability (in sales order create page)
    a. there should be button to check availability of products in warehouse 
    b. after clicking that button it should open a popup form where user can select customer group (active only) and warehouse (active only) and upload excel file to check availability 
    c. after uploading perform following calculations/logics 
        i. check if customer available and is active or not, if not then show error message and don't create sales order for that customer 
        ii. check if product available and is active or not, if not then show error message and don't create sales order for that product before checking availability check for sku mapping 
        iii. make a excel file with all errors and show download button to download that file 
        iv. show success message if no error found 
        v. if no error found display table with all products and their availability in the warehouse 
        vi. there should be button to download that file 

3. Create sales order 
    a. display form to create new sales order 
    b. there should be select box to select customer groups (active only)
    c. there should be select box to select warehouse (active only)
    b. user should be able to upload customer po (excel/csv) file and after uploading perform following calculations/logics 
        i. check if customer available and is active or not, if not then show error message and don't create sales order for that customer 
        ii. check if product available and is active or not, if not then show error message and don't create sales order for that product before checking availability check for sku mapping 
        iii. check if vendor available and is active or not, if not then show error message and don't create sales order for that vendor 
        iv. make a excel file with all errors and show download button to download that file 
        v. for all successful records create sales order and show success message 
        vi. after creating sales order redirect to sales order list page 
        vi. if quantity for all products is available in warehouse then change sales order status to 'ready to ship' else change status to 'blocked' 
        vii. if any one of product quantity is short then change sales order status to 'blocked' 
        viii. if any one or more products quantity is short then create a purchase order for that sales order using it's vendor 
        ix. block quantity in warehouse stock table for all products in that sales order so it will not be available for other sales orders 
        x. check current sales order details page and make sure to add all necessary info there 
        xi. add refresh button in sales order details page that will check for available quantity in warehouse stock and update ordered po quantity accordingly 
        xii. there should be a button to create purchase order if any product quantity is short 
        xiii. there should be a button to generate invoice for that sales order based on po number, brand (optional) and selected products(optional)
        xiv. there should be a button to redirect to invoice module for that sales order 
        xv. there should be tabs for table view such as all products, invoice created products, not created invoice products by using invoice status 
        xvi. there should be a button to change status of sales order 
        xvii. there should be a button to delete selected sales order products from sales order
    e. there should be a button to delete selected sales orders from list and also from the database 
    f. there should be a button to export sales order product list in excel/csv format 
    g. user can update sales order products by uploading excel file (same file format which is downloaded after creating sales order) 




----------------------- Problems ------------------------ 

1. when updating sales order of customer after receiving vendor products then it is not updating dispatched quantity properly 

-- page: http://127.0.0.1:8000/packing-products-list/1                                               -- solved    
1. there are 2 columns same PO Number                                                                -- solved 
2. if user wants to set dispatch quantity to 0 then set it to 0 but how??                            -- solved 


-- page: http://127.0.0.1:8000/purchase-order-view/1                                                 -- solved 
1. if delete purchase order then it should delete pi order related to that order 


-- page: vendor purchase order 
    -- total amount is not showing properly 
    -- total paid amount is not showing properly 
    -- total due amount is not showing properly 



-- Re-Order: 
    -- short products quantity re-order quantity from vendor 

-- Return Or Accept: 
    -- extra products return to vendor 
    -- extra products accept from vendor and store to warehouse stock 
    





================================= Changes ===================================== 
1. MPR confirmation 
    -- PO MRP == Product MRP                         -- done 
    -- all other incorrect                           -- done 

2. Basic Rate in product master -- add it            -- done 
3. Net landing rate 
    -- calculate 
        -- basic rate + gst 
        -- 100 + (5% of basic rate == 5) 
        -- 105                                       -- done 

4. PCS/SET * SETS/CTN = case pack quantity           -- done 
5. PO Quantity(customer quantity), Purchase Order Quantity(vendor quantity we ordering)                   -- done 
6. PO Number (system generated), Purchase Order Number (customer PO number uploaded from customer po)     -- done  
7. Purchase Rate Basic auto filled from db when we download vendor PO                                     -- not done 
8. Purchase Order detail 
    -- display vendor Name                           -- done 
10. 2nd PO no is customer PO number that will present in customer sales order (Purchase Order) 
    -- based on that PO number invoices will be generate 
10. Invoice will be generate on selected products 
11. Invoice can be generate if want to sort using brands, etc. 



products table 

vendor_purchase_rate == basic_rate  
vendor_net_landing == net_landing_rate 

------------- temp order for sales order ----------












--- product shortages && product extras --- 

Order From Vendors 
    -- if quantity is short accept that quantity  (optional)
    -- if quantity is short(damaged) return that quantity to vendor 
    -- if quantity is extra return that quantity to vendor or accept 


---------------- not done -------------------
-- purchase order (received products) - reject() 










be remember these all points and complete them 
generate invoice based on customer address (customers table) and po number (temp_orders table) the logic is already defined in sales order controller in changeStatus() method but has issues in that 
in my view.blade.php file that is placed in views/salesOrder folder i displayed sales orders products list we want to filter that table and on filtered data we want to generate invoice
these filters are customer address, customer name, brand and po number 
if the filters are not apllied then it should generate invoice for all products of that sales order but take customer address and po number for generating invoice as unique 
so my invoices will generate for unique columns for all/2 columns customer address(customers table - compulsory), po number (temp_orders table - compulsory), brand (products table - optional), customer name (customers table - optional) 
also invoice will be generate on selected products only also there will apply compulsory filters 
when completing the generating invoice logic display this generated invoices in sales order (views/salesOrder/view.blade.php) page in card format and list format for download the invoice 
also list these invoices in invoice module (views/invoice/index.blade.php) page in card format and list format for download the invoice 
the invoices will be also generate based on change status where status will changed to ready_to_ship 









--------------------- products issues --------------------------- 


received products -- 
    -- update received products 
        -- do not save extra products 
        -- extra products will store in vendor_return_products 
            -- return_quantity = extra quantity 
            -- return_reason = extra 
            -- return_description = extra products return to vendor 
            -- return_status = pending 
            -- if return_status = returned (then no need to update anything)
            -- if return_status = accepted (then add that quantity to warehouse stock and update vendor_return_product table with accepted status)

        -- if quantity is short accept that quantity  (optional) 
        -- if quantity is short(damaged) return that quantity to vendor 
        -- if quantity is short(damaged) accept that quantity  (optional) 




---------------------------- Refresh button --------------------------

view sales order - add refresh button that can 
                    - recheck for available quantity in warehouse stock and update ordered po quantity accordingly 

======================================================================
======================================================================









1. staffs 
2. roles 
3. permissions 
4. customer groups - customers 
    **Pages**  
    1. customer groups list 
        a. display list of customer groups in card format 
        b. display total no of customers in that group, active customers, inactive customers, etc.
        c. the list should be categorized based on status like active, inactive, all 
        d. display list of customer groups in table format 
        e. with action column where logged in user can take action such as view, edit, delete, change status 
        f. after changing status of customer group, it should reflect in the list and also in the database 
        g. after clicking view it should show all info of that customer group 
        h. after clicking edit it should open a form where user can edit that customer group's name and after saving it should reflect in the list and also in the database 
        i. after clicking delete it should delete that customer group from the list and also from the database  
        j. there should be option to delete multiple customer groups at once from the list and also from the database  
        k. there should be option to change status of multiple customer groups at once from the list and also in the database  

    2. customer groups create 
        a. one input field for customer group name 
        b. and one file input to upload customer list in excel format 
        c. after submit redirect to customer group list page 
        d. and show success message 
        e. and show error message if any error occurs 
        f. if customer is already exist in database then it should not add that customer again and show message that customer already exist 
        g. if customer is not exist in database then it should add that customer in database and also in customer group members table 
        h. if customer is not exist in database and customer group members table then it should add that customer in database and also in customer group members table 
        i. if customer is exist in database but not in customer group members table then it should add that customer in customer group members table only 
        
    3. customer groups view 
        a. display total customers in that group, active customers, inactive customers, etc.
        b. display list of customers in that group in table format 
        c. with action column where logged in user can take action such as view, edit, delete, change status 
        d. after changing status of customer, it should reflect in the list and also in the database 
        e. after clicking view it should show all info of that customer 
        f. after clicking edit it should open a form where user can edit that customer's info and after saving it should reflect in the list and also in the database 
        g. after clicking delete it should delete that customer from the list and also from the database  
        h. there should be option to delete multiple customers at once from the list and also from the database  
        i. there should be option to change status of multiple customers at once from the list and also in the database   
        

    4. customer groups edit  
        a. after clicking edit it should open a form where user can edit that customer group's name and after saving it should reflect in the list and also in the database 
        b. there should be back button to go back to customer group list page 


5. vendors 
    1. vendor list 
        a. display total no of vendors in card format 
        b. display total no of active, inactive, blocked, etc. vendors in card format 
        c. display list of vendors in table format 
        d. with action column where logged in user can take action such as view, edit, delete, change status 
        e. after changing status of vendor, it should reflect in the list and also in the database 
        f. after clicking view it should show all info of that vendor 
        g. after clicking edit it should open a form where user can edit that vendor's info and after saving it should reflect in the list and also in the database 
        h. after clicking delete it should delete that vendor from the list and also from the database  
        i. there should be option to delete multiple vendors at once from the list and also from the database  
        j. there should be option to change status of multiple vendors at once from the list and also in the database  

6. products 
7. sku mapping 
8. warehouses 
9. create sales order
10. create purchase order 
11. received order 
12. packaging products 
13. ready to ship 
14. product issues 
15. vendor return products 
16. customer return 
17. track order 
18. vendor purchase 
19. customer sales 
20. inventory stocks 

21. Dashboard 
22. excel file formats list 



# 🚀 ULTIMATE VS CODE COPILOT PROMPT - COPY & PASTE DIRECTLY

You are a professional Laravel 10+ developer. FOLLOW EVERY REQUIREMENT EXACTLY - this is your only instruction set.

## ⚙️ SYSTEM REQUIREMENTS (NON-NEGOTIABLE)

**Every method MUST have:**
- Try-catch block
- DB::beginTransaction() & commit()/rollBack() 
- Validator::make() for input validation
- activity()->performedOn()->causedBy(Auth::user())->log()
- redirect()->with('success'|'error', 'msg')
- Log::error() on exceptions

**Every Blade template MUST have:**
- extend('layouts.master')
- @csrf in forms
- @error directives
- Breadcrumb navigation
- Bootstrap 5 (ONLY)
- Error alert at top
- Empty states in tables

**Every database operation:**
- Tables: plural snake_case (customer_groups)
- ->paginate(15)
- ->with() for eager loading
- $casts = ['status' => 'boolean']
- scopeActive() & scopeInactive()

**Naming (MANDATORY):**
- Controllers: Plural+Controller (CustomerGroupController)
- Models: Singular PascalCase (Customer)
- Views: Plural folder (customers/)
- Routes: dot notation (customer.groups.index)

## 📝 VALIDATION PATTERNS

```
Text: required|string|max:255
Email: required|email|max:255|unique:table,column
Phone: required|regex:/^[0-9]{10}$/
File: required|file|mimes:xlsx,xls,csv|max:5120
Date: required|date|before:today
Status: nullable|in:0,1
```

## 💻 CONTROLLER TEMPLATE

```php
public function action(Request $request, $id = null) {
    $validator = Validator::make($request->all(), ['field' => 'required|string|max:255']);
    if ($validator->fails()) return redirect()->back()->withErrors($validator)->withInput();
    
    DB::beginTransaction();
    try {
        $model = Model::findOrFail($id);
        $model->update(['field' => $request->field]);
        DB::commit();
        activity()->performedOn($model)->causedBy(Auth::user())->log('Action');
        return redirect()->route('items.index')->with('success', 'Done');
    } catch (\Exception $e) {
        DB::rollBack();
        Log::error($e->getMessage());
        return redirect()->back()->with('error', 'Error: ' . $e->getMessage())->withInput();
    }
}
```

## 📄 BLADE FORM TEMPLATE

```blade
@extends('layouts.master')
@section('main-content')
<main class="main-wrapper">
    <div class="main-content">
        <div class="page-breadcrumb mb-3">
            <nav><ol class="breadcrumb"><li class="breadcrumb-item"><a href="{{ route('dashboard') }}"><i class="bx bx-home-alt"></i></a></li><li class="breadcrumb-item active">Page</li></ol></nav>
        </div>
        
        @if($errors->any())
            <div class="alert alert-danger"><ul class="mb-0">@foreach($errors->all() as $e)<li>{{ $e }}</li>@endforeach</ul></div>
        @endif
        
        <div class="card">
            <div class="card-body">
                <form action="{{ route('items.store') }}" method="POST">
                    @csrf
                    <div class="mb-3">
                        <label class="form-label">Field <span class="text-danger">*</span></label>
                        <input type="text" class="form-control @error('field') is-invalid @enderror" name="field" value="{{ old('field') }}" required>
                        @error('field')<div class="invalid-feedback">{{ $message }}</div>@enderror
                    </div>
                    <button type="submit" class="btn btn-primary">Save</button>
                </form>
            </div>
        </div>
    </div>
</main>
@endsection
```

## 📊 BLADE TABLE TEMPLATE

```blade
<table class="table table-striped table-hover">
    <thead class="table-light">
        <tr><th style="width:40px;"><input type="checkbox" id="selectAll"></th><th>Name</th><th>Status</th><th style="width:120px;">Actions</th></tr>
    </thead>
    <tbody>
        @forelse($items as $item)
            <tr>
                <td><input type="checkbox" class="item-checkbox" name="ids[]" value="{{ $item->id }}"></td>
                <td>{{ $item->name }}</td>
                <td><span class="badge {{ $item->status ? 'bg-success' : 'bg-secondary' }}">{{ $item->status ? 'Active' : 'Inactive' }}</span></td>
                <td><a href="{{ route('items.edit', $item->id) }}" class="btn btn-sm btn-info"><i class="bx bx-pencil"></i></a></td>
            </tr>
        @empty
            <tr><td colspan="4" class="text-center text-muted py-4">No records found</td></tr>
        @endforelse
    </tbody>
</table>
```

## 🔄 AJAX STATUS TOGGLE

```php
public function toggleStatus(Request $request) {
    $validator = Validator::make($request->all(), ['id' => 'required|exists:table,id', 'status' => 'required|in:0,1']);
    if ($validator->fails()) return response()->json(['success' => false], 422);
    
    DB::beginTransaction();
    try {
        $item = Model::findOrFail($request->id);
        $item->status = $request->status;
        $item->save();
        DB::commit();
        activity()->performedOn($item)->causedBy(Auth::user())->log('Status changed');
        return response()->json(['success' => true]);
    } catch (\Exception $e) {
        DB::rollBack();
        return response()->json(['success' => false, 'message' => $e->getMessage()], 500);
    }
}
```

## ✅ IMPORTS

```php
use Illuminate\Http\Request;
use Illuminate\Support\Facades\{Auth, DB, Log, Validator};
use Spatie\SimpleExcel\SimpleExcelReader;
```

## ✓ DO | ✗ DON'T

✓ Bootstrap 5 | ✗ Custom CSS
✓ @csrf token | ✗ Skip it
✓ Error handling | ✗ Forget it
✓ Validation | ✗ Skip it
✓ Transactions | ✗ No rollback
✓ Activity log | ✗ Skip it
✓ Breadcrumbs | ✗ Missing
✓ Eager load | ✗ N+1 queries
✓ withInput() | ✗ Lose data
✓ @error directives | ✗ No feedback




Sales Order Module Requirements
Note: All modules share the same table columns for consistency across the application .

1. Sales Order Overview
Card Summary Dashboard:
Display sales order statistics in a card format, including:

Total number of sales orders

Total pending sales orders

Total completed sales orders

Total blocked sales orders

Total "Ready to Ship" sales orders

Total "Ready to Package" sales orders

Tabular Sales Order List:
Display sales orders in a table showing:

Sales Order ID

Customer Group Name

Ordered Date

Delivery Date

Status

Actions (View, Delete, Bulk Delete)

Actions:

View: On click, show complete sales order details (/sales-order-view/{id}).

Delete: Permanently delete sales order from both the list and database.

Bulk Delete: Allow selection and deletion of multiple sales orders with confirmation popup. If records have unfulfilled quantity, show an alert that all connected records (e.g., purchase orders, vendor invoices) will also be deleted .

Create New: Provide a dedicated button to create a new sales order (/sales-order-create).

2. Product Availability Checking (On Sales Order Creation Page)
Availability Button:
Users can check product availability in selected warehouses .

Availability Popup Form:

Select active customer group.

Select active warehouse.

Upload Excel file for product list.

Validation Logic:

Verify customer existence and active status; show error and skip if inactive.

Verify product existence, active status, and SKU mapping; show error and skip if validation fails.

Generate downloadable Excel report for errors found.

If no errors, show success message and display a table of products with their warehouse availability.

Provide download option for the validated product list.

3. Sales Order Creation
Sales Order Form:

Select active customer group.

Select active warehouse .

Upload customer purchase order (Excel/CSV).

Validation & Logic:

Confirm customer, product, and vendor active status. Show errors for missing/inactive records.

Create downloadable error report for invalid entries.

On successful validation:

Create sales orders for valid records.

Show success confirmation and redirect to sales order list.

Set sales order status:

"Ready to Ship" if all product quantities in warehouse are sufficient.

"Blocked" if any product quantity is insufficient.

For product quantity shortfalls, auto-create purchase order for the required vendor.

Reserve warehouse stock (block quantity) for products in the sales order.

Ensure detailed sales order information is visible in the sales order details page .

Sales Order Details Actions:

Refresh button to update and validate warehouse stock quantities.

Option to manually create a purchase order for shortages.

Generate invoice from sales order using PO number, brand (optional), and selected products (optional).

Redirect button to invoice module for further processing.

Tab view for filtering product/invoice status:

All products

Invoice-created products

Products without invoicing (by invoice status)

Change status button for sales order.

Option to delete selected products within the sales order.

Bulk delete for sales orders from the list/database.

Export sales order product list in Excel/CSV format.

Update sales order products via Excel upload (using downloadable format from creation process) .

4. User Experience Enhancements
Use confirmation prompts and error messages for critical actions (deletion, bulk operations, invalid entries).

Employ progress/success notifications after uploads and status changes.

Maintain table pagination, filter, and search features to improve usability on large data sets.

Ensure robust security checks and validation for all user actions and uploads .